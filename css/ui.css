#global-message-container {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1050;
  pointer-events: none;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 1rem;
}

#global-message-container .alert {
  pointer-events: auto;
  margin-bottom: 0.5rem;
  opacity: 0;
  transform: translateY(-100%);
  transition: opacity 0.3s ease, transform 0.3s ease;
  max-width: 600px;
  width: 100%;
}

#global-message-container .alert.show {
  opacity: 1;
  transform: translateY(0);
}

.main-content {
  transition: transform 0.3s ease;
  will-change: transform;
}

.card-item .d-flex.align-items-center {
  display: flex;
  gap: 8px;
  align-items: center;
  flex-wrap: wrap;
}
.card-item .d-flex.align-items-center .form-select {
  min-width: 140px;
  max-width: 240px; /* fit within updated 300px column */
  padding: 6px 8px;
  font-size: 13px;
}
.card-item .d-flex.align-items-center .btn {
  padding: 6px 10px;
  font-size: 13px;
  border-radius: 8px;
}
.card-item .d-flex.align-items-center form.d-inline.ms-auto {
  margin-left: auto;
}

.card-item .d-flex .btn-outline-danger {
  min-width: 64px;
}
.card-item .d-flex .btn-outline-warning {
  min-width: 64px;
}

@media (max-width: 600px) {
  .card-item .d-flex.align-items-center {
    gap: 6px;
  }
  .card-item .d-flex.align-items-center .form-select {
    min-width: 120px;
  }
  .card-item .d-flex .btn-outline-danger,
  .card-item .d-flex .btn-outline-warning {
    min-width: 56px;
    padding: 6px 8px;
  }
}

:root {
  --bg: #fbfdff;
  --card: #ffffff;
  /* muted text color should be a neutral gray; primary remains the blue accent */
  --muted: #64748b; /* slate-500 */
  --primary: #0d6efd;
  --accent: #0d6efd;
  --soft: #f1f7fb;
  --shadow: 0 8px 24px rgba(16, 24, 40, 0.08);
  --radius: 12px;
}

/* Standardize buttons across the app (base + size + subtle animation/shadow)
   Uses the project's color variables where appropriate so Bootstrap variants keep their meaning.
*/
.btn {
  padding: 10px 14px;
  border-radius: 10px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  font-weight: 600;
  transition: transform 0.12s ease, box-shadow 0.12s ease, opacity 0.12s ease;
  box-shadow: 0 6px 18px rgba(16, 24, 40, 0.06);
  border: 1px solid transparent;
  text-decoration: none;
}

/* Ensure inline text inside buttons is centered and doesn't overflow the kanban card layout */
.btn,
.btn * {
  text-align: center;
}

.btn-sm {
  padding: 6px 10px;
  font-size: 13px;
  border-radius: 8px;
}

.btn:focus {
  outline: none;
  box-shadow: 0 0 0 4px rgba(13, 110, 253, 0.08);
}
.btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 26px rgba(16, 24, 40, 0.12);
}
.btn:active {
  transform: translateY(0) scale(0.995);
}

/* Keep Bootstrap color semantics but ensure consistent backgrounds using variables */
.btn-primary {
  background: var(--primary);
  color: #fff;
  border-color: rgba(13, 110, 253, 0.9);
}
.btn-secondary {
  background: #6c757d;
  color: #fff;
}
.btn-success {
  background: #0d6efd;
  color: #fff;
}
.btn-danger {
  background: #dc3545;
  color: #fff;
}
.btn-info {
  background: #0d6efd;
  color: #fff;
}
/* Explicitly override Bootstrap's .btn-info hover/focus to keep white text
   and the chosen blue background. This selector is intentionally specific and
   uses !important to ensure it wins over the CDN Bootstrap rules. */
.card-item .d-flex .btn.btn-info:hover,
.card-item .d-flex .btn.btn-info:focus,
.card-item .d-flex .btn.btn-info:active,
.card-item .d-flex .btn.btn-info.show,
.card-item .d-flex .btn.btn-info:focus-visible {
  background-color: #0d6efd;
  color: #ffffff;
  border-color: rgba(13, 110, 253, 0.9);
}

/* Outline variants: keep transparent bg and colored borders/text
   Also set per-variant CSS custom properties so a single grouped hover rule
   can keep colors stable while preserving motion effects. */
.btn {
  /* defaults for custom props (fallbacks used if a variant doesn't set them) */
  --btn-bg: transparent;
  --btn-fg: inherit;
  --btn-border: transparent;
}
.btn-primary {
  background: var(--primary);
  color: #fff;
  border-color: rgba(13, 110, 253, 0.9);
  --btn-bg: var(--primary);
  --btn-fg: #fff;
  --btn-border: rgba(13, 110, 253, 0.9);
}
.btn-secondary {
  background: #6c757d;
  color: #fff;
  --btn-bg: #6c757d;
  --btn-fg: #fff;
  --btn-border: #6c757d;
}
.btn-success {
  background: #0d6efd;
  color: #fff;
  --btn-bg: #0d6efd;
  --btn-fg: #fff;
  --btn-border: rgba(13, 110, 253, 0.9);
}
.btn-danger {
  background: #fff;
  color: #000;
  --btn-bg: #fff;
  --btn-fg: #000;
  --btn-border: #fff;
}
.btn-info {
  background: #0d6efd;
  color: #fff;
  --btn-bg: #0d6efd;
  --btn-fg: #fff;
  --btn-border: rgba(13, 110, 253, 0.9);
}
.btn-warning {
  background: #ffc107;
  color: #000;
  --btn-bg: #ffc107;
  --btn-fg: #000;
  --btn-border: #ffc107;
}
.btn-light {
  background: #f8f9fa;
  color: #000;
  --btn-bg: #f8f9fa;
  --btn-fg: #000;
  --btn-border: #f8f9fa;
}
.btn-dark {
  background: #212529;
  color: #fff;
  --btn-bg: #212529;
  --btn-fg: #fff;
  --btn-border: #212529;
}
.btn-outline-warning {
  color: #000;
  border-color: #ced4da;
  background: transparent;
  --btn-bg: transparent;
  --btn-fg: #000;
  --btn-border: #ced4da;
}
.btn-outline-danger {
  color: #000;
  border-color: #ced4da;
  background: transparent;
  --btn-bg: transparent;
  --btn-fg: #000;
  --btn-border: #ced4da;
}

/* Single grouped rule: on hover/focus/active keep colors sourced from custom props
   so buttons only animate/lift without changing their color/foreground. */
body .btn:hover,
body .btn:focus,
body .btn:active,
body .btn.show,
body .btn:focus-visible {
  background-color: var(--btn-bg);
  color: var(--btn-fg);
  border-color: var(--btn-border);
}

#global-message-container {
  position: fixed;
  top: 40px;
  left: 0;
  right: 0;
  z-index: 1050;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 1rem;
}

#global-message-container .alert {
  max-width: 600px;
  width: 100%;
  margin-bottom: 0.5rem;
  opacity: 0;
  transform: translateY(-100%);
  transition: opacity 0.3s ease, transform 0.3s ease;
}

#global-message-container .alert.show {
  opacity: 1;
  transform: translateY(0);
}

.container.mt-5 {
  transition: transform 0.3s ease;
  transform-origin: top;
  will-change: transform;
}

* {
  box-sizing: border-box;
}
html,
body {
  height: 100%;
  margin: 0;
  font-family: Inter, "Segoe UI", Roboto, Arial, sans-serif;
  background: var(--bg);
  color: #0f1724;
}

.container-root {
  max-width: 1200px;
  margin: 28px auto;
  padding: 18px;
}

.board {
  display: flex;
  gap: 18px;
  align-items: flex-start;
  width: 100%;
}
.column {
  flex: 1;
  background: linear-gradient(
    180deg,
    rgba(255, 255, 255, 0.7),
    rgba(241, 247, 251, 0.7)
  );
  border-radius: 12px;
  padding: 12px;
  min-height: 420px;
  box-shadow: var(--shadow);
  display: flex;
  flex-direction: column;
}

/* Equally distribute width among columns */
.column[data-status="pending"],
.column[data-status="in-progress"],
.column[data-status="completed"] {
  flex: 1 1 calc(33.333% - 12px);
  min-width: 0;
}
.column h4 {
  margin: 0 0 8px 0;
  font-size: 16px;
}
.column-body {
  flex: 1;
  overflow-y: auto;
  padding: 6px;
}

/* Fix the height of the first column (pending / "Chưa hoàn thành") so it doesn't auto-scale.
   Use the current visual height as the fixed value and allow its contents to scroll. Width
   behavior remains unchanged. A smaller fixed height is used on narrow screens. */
.column[data-status="pending"] .column-body,
.column[data-status="in-progress"] .column-body,
.column[data-status="completed"] .column-body {
  height: 420px; /* fixed height based on current layout */
  min-height: 420px;
  max-height: 420px;
  overflow-y: auto;
}

@media (max-width: 600px) {
  .column[data-status="pending"] .column-body,
  .column[data-status="in-progress"] .column-body,
  .column[data-status="completed"] .column-body {
    height: 320px; /* slightly smaller on small devices */
    min-height: 320px;
    max-height: 320px;
    overflow-y: auto;
  }
}

.card-item {
  background: var(--card);
  border-radius: 10px;
  padding: 12px;
  margin-bottom: 12px;
  box-shadow: 0 6px 20px rgba(16, 24, 40, 0.06);
  transition: transform 0.18s ease, box-shadow 0.18s ease, opacity 0.18s ease;
}
.card-item .meta {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 12px;
  color: var(--muted);
  margin-bottom: 8px;
}
.card-item h5 {
  margin: 0 0 6px 0;
  font-size: 15px;
}
.card-item p {
  margin: 0 0 8px 0;
  color: #334155;
}

.badge-priority {
  padding: 6px 8px;
  border-radius: 999px;
  font-size: 12px;
  color: white;
}
.badge-low {
  background: #6abf8f;
}
.badge-medium {
  background: #ffb86b;
}
.badge-high {
  background: #ff6b6b;
}

.card-placeholder {
  display: none;
}

.column.drag-over {
  outline: none;
  transform: none;
}

@media (max-width: 1000px) {
  .board {
    flex-wrap: nowrap;
    overflow-x: auto;
    padding-bottom: 8px;
  }
  .column[data-status="pending"],
  .column[data-status="in-progress"],
  .column[data-status="completed"] {
    flex: 0 0 300px;
    min-width: 300px;
  }
  .column-body {
    max-height: 520px;
  }
}

@media (max-width: 600px) {
  .column {
    min-width: 280px;
    flex: 0 0 280px;
    padding: 10px;
  }
  .card-item {
    padding: 10px;
  }
  .card-placeholder {
    height: 64px;
  }
}

/* On small screens, make pending column a bit narrower to fit mobile layouts */
@media (max-width: 600px) {
  .column[data-status="pending"] {
    flex: 0 0 280px;
    max-width: 280px;
  }
  .column[data-status="in-progress"],
  .column[data-status="completed"] {
    flex: 0 0 280px;
    max-width: 280px;
  }
}

.column[aria-label] {
  position: relative;
}

/* --- merged from style.css --- */
body {
  background-color: #f8f9fa;
}
.card {
  border: none;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}
.navbar {
  margin-bottom: 2rem;
}
.list-group-item h5 {
  color: #0d6efd;
}
@media (max-width: 768px) {
  .container {
    padding: 0 5px;
  }
  .card {
    margin-bottom: 1rem;
  }
}

/* Slide-down transition for global alerts so they push content smoothly */
#global-message-container .alert {
  transform: translateY(-10px);
  opacity: 0;
  transition: transform 800ms ease, opacity 800ms ease;
}
#global-message-container .alert.show {
  transform: translateY(0);
  opacity: 1;
}

/* Smoothly move the main content container (.container.mt-5) down when global alerts appear */
#global-message-container ~ .container.mt-2 {
  transition: transform 800ms ease;
  will-change: transform;
}

/* notification-container rules removed — notifications unified to #global-message-container */
